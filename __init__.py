from auth import register, login
from clients_and_advisors import *
from models import *
from admins import *
from rotations import *
from security_updates import apply_security_updates
import os
import socket
import ssl
import sys
import io
import datetime
from secure_messaging import message_menu
from argon2 import low_level
from pathlib import Path
import importlib.util
import secrets

def clear_screen():
    print("\n" * 100)

def log_audit(user_id, action, description):
    session = Session()
    try:
        master_passphrase = get_master_key()
        salt = hashlib.sha256(master_passphrase).digest()[:16]
        key_material = low_level.hash_secret_raw(
            secret=master_passphrase,
            salt=salt,
            time_cost=3,
            memory_cost=65536,
            parallelism=4,
            hash_len=64,
            type=low_level.Type.ID
        )
        master_encryption_key = key_material[:32]

        master_aesgcm = AESGCM(master_encryption_key)

        description_iv = os.urandom(12)
        encrypted_description = master_aesgcm.encrypt(
            description_iv,
            description.encode(),
            None
        )

        audit_entry = Logs(
            user_id=user_id,
            action=action,
            description=base64.b64encode(encrypted_description).decode('utf-8'),
            description_iv=base64.b64encode(description_iv).decode('utf-8'),
            timestamp=datetime.datetime.now()
        )
        session.add(audit_entry)
        session.commit()
    except Exception as e:
        session.rollback()
        print(f"Error logging action: {e}")
    finally:
        session.close()

def generate_master_key():
    hsm_dir = Path("hardware_security_module") / ("master_key")
    hsm_dir.mkdir(parents=True, exist_ok=True)

    key_path = hsm_dir / "master.key"

    try:
        subprocess.run(["openssl", "rand", "-out", str(key_path), "32"], check=True, capture_output=True)

        os.chmod(key_path, 0o600)
        print(f"Master key generated and stored at {key_path}")

        with open(key_path, 'rb') as key_file:
            return key_file.read()
    except subprocess.SubprocessError as e:
        print(f"Error generating key with OpenSSL: {e}")
        return None

def get_master_key():
    key_path = Path("hardware_security_module") / ("master_key") / ("master.key")

    if key_path.exists():
        with open(key_path, 'rb') as key_file:
            return key_file.read()
    else:
        return "default_master_key".encode()

def handle_client(conn):
    try:
        old_stdout = sys.stdout
        old_stdin = sys.stdin
        sys.stdout = io.TextIOWrapper(conn.makefile('wb'), line_buffering=True)
        sys.stdin = io.TextIOWrapper(conn.makefile('rb'), line_buffering=True)

        main_menu()
    except Exception as e:
        print(f"Error: {e}")
    finally:
        print("Shutting down.")
        sys.stdout = old_stdout
        sys.stdin = old_stdin
        conn.close()

def start_tls_server(host='0.0.0.0', port=9999):
    db_file = Path('myfinance.db')
    cert_dir = Path("hardware_security_module") / ("certificates")
    key_path = cert_dir / ("server.key")
    cert_path = cert_dir / ("server.crt")

    if not db_file.exists() or not cert_dir.is_dir() or not key_path.exists() or not cert_path.exists():
        generate_master_key()
        print("The master encryption key has been generated and set.")
        log_audit(None, "Master Key Generated", "The master key was generated and set by the system.")
        cert_path, key_path = generate_certificates()
        print("The TLS certificates have been generated.")
        log_audit(None, "TLS Certificates Generation", "TLS Certificates were generated by the system")
    else:
        print("Database and certificate directory both exist. Skipping key generation.")

    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2
    context.minimum_version = ssl.TLSVersion.TLSv1_3

    context.set_ciphers('ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AES:!aNULL:!eNULL:!MEDIUM:!LOW')

    context.load_cert_chain(certfile=cert_path, keyfile=key_path)

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    try:
        server_socket.bind((host, port))
        server_socket.listen(5)

        print(f"TLS Server listening on port {port}.")
        print("Press Ctrl+C to stop the server")

        log_audit(None, "Server Setup", f"The server started up successfully on port {port}.")

        while True:
            try:
                client_socket, addr = server_socket.accept()
                ip, port = addr
                print(f"Connection from {addr}")

                log_audit(None, "Server Connection", f"Attempted connection from {ip}:{port}.")

                try:
                    secure_socket = context.wrap_socket(
                        client_socket,
                        server_side=True
                    )

                    cipher = secure_socket.cipher()
                    log_audit(None, "Server Connection", f"Successful connection from {ip}:{port}.")
                    print(f"TLS Connection established using {cipher[0]} with {cipher[1]}-bit {cipher[2]}")

                    handle_client(secure_socket)

                except ssl.SSLError as e:
                    log_audit(None, "Server Connection", f"Failed connection attempt from {ip}:{port} due to an error: {e}")
                    print(f"TLS error: {e}")
                    client_socket.close()
                    break

            except KeyboardInterrupt:
                log_audit(None, "Server Shutdown", f"The server is shutting down.")
                print("The server is shutting down.")
                sys.stdout = old_stdout
                sys.stdin = old_stdin
                conn.close()
                break
            except Exception as e:
                log_audit(None, "Server Setup", f"Failed connection attempt from {ip}:{port} due to an error: {e}")
                print(f"Error handling connection: {e}")
                server_socket.close()
                break

    except OSError as e:
        print(f"Server error: {e}")
        print(f"Could not bind to {host}:{port}. Is the port already in use?")
    finally:
        log_audit(None, "Server Setup", f"The server has shutdown.")
        server_socket.close()
        print("Server stopped.")

def get_all_clients():
    print("-" * 200)
    print("My Finance Inc. Clients")
    print("-" * 200)
    clients_data = session.query(User).filter(User.role == 'client').all()

    if not clients_data:
        print("No clients available.")
        return

    master_passphrase = get_master_key()
    salt = hashlib.sha256(master_passphrase).digest()[:16]
    key_material = low_level.hash_secret_raw(secret=master_passphrase, salt=salt, time_cost=3, memory_cost=65536,
                                             parallelism=4, hash_len=64, type=low_level.Type.ID)
    master_encryption_key = key_material[:32]
    master_aesgcm = AESGCM(master_encryption_key)

    for user in clients_data:
        try:
            sym_key = session.query(UserSymmetricKeys).filter(
                UserSymmetricKeys.user_id == user.user_id,
                UserSymmetricKeys.active == True
            ).first()

            if not sym_key:
                print(f"No active symmetric key found for user {user.user_id}")
                continue

            dek_iv = base64.b64decode(sym_key.dek_iv)
            encrypted_dek = base64.b64decode(sym_key.encrypted_dek)
            user_dek = master_aesgcm.decrypt(dek_iv, encrypted_dek, None)
            user_aesgcm = AESGCM(user_dek)

            full_name_iv = base64.b64decode(user.full_name_iv)
            encrypted_full_name = base64.b64decode(user.full_name)
            decrypted_full_name = user_aesgcm.decrypt(full_name_iv, encrypted_full_name, None).decode('utf-8')

            print(f"User ID: {user.user_id} | Name: {decrypted_full_name}")

        except Exception as e:
            print(f"Error displaying client {user.user_id}: {e}")

def get_all_advisors():
    print("-" * 200)
    print("My Finance Inc. Advisors")
    print("-" * 200)

    advisors_data = session.query(User).filter(User.role == 'advisor').all()

    if not advisors_data:
        print("No financial advisors available.")
        return

    master_passphrase = get_master_key()
    salt = hashlib.sha256(master_passphrase).digest()[:16]
    key_material = low_level.hash_secret_raw(secret=master_passphrase, salt=salt, time_cost=3, memory_cost=65536,
                                             parallelism=4, hash_len=64, type=low_level.Type.ID)
    master_encryption_key = key_material[:32]
    master_aesgcm = AESGCM(master_encryption_key)

    for user in advisors_data:
        try:
            sym_key = session.query(UserSymmetricKeys).filter(
                UserSymmetricKeys.user_id == user.user_id,
                UserSymmetricKeys.active == True
            ).first()

            if not sym_key:
                print(f"No active symmetric key found for advisor {user.user_id}")
                continue

            dek_iv = base64.b64decode(sym_key.dek_iv)
            encrypted_dek = base64.b64decode(sym_key.encrypted_dek)
            user_dek = master_aesgcm.decrypt(dek_iv, encrypted_dek, None)
            user_aesgcm = AESGCM(user_dek)

            full_name_iv = base64.b64decode(user.full_name_iv)
            encrypted_full_name = base64.b64decode(user.full_name)
            decrypted_full_name = user_aesgcm.decrypt(full_name_iv, encrypted_full_name, None).decode('utf-8')

            print(f"User ID: {user.user_id} | Name: {decrypted_full_name}")
        except Exception as e:
            print(f"Error displaying advisor {user.user_id}: {e}")


def main_menu():
    exit_program = False
    while exit_program != True:
        clear_screen()
        print("-" * 200)
        print("My Finance Inc. Main Menu")
        print("-" * 200)
        print("- Please enter '1' to register an account.")
        print("- Please enter '2' to login to your account.")
        print("- Please enter '3' to exit this your program.")
        register_or_login = input("\nSelect: ")

        if register_or_login == "1":
            clear_screen()
            result = register()
            if result:
                user_id, user_role, user_full_name = result
                if user_role == "client":
                    log_audit(user_id, "Successful Registration", f"The client '{user_full_name}' has successfully registered logged in.")
                    client_menu(user_id, user_full_name)
                elif user_role == "advisor":
                    log_audit(user_id, "Successful Registration", f"The advisor '{user_full_name}' has successfully registered and logged in.")
                    advisor_menu(user_id, user_full_name)
                elif user_role == "admin":
                    log_audit(user_id, "Successful Registration", f"The administrator '{user_full_name}' has successfully registered and logged in.")
                    admin_menu(user_id, user_full_name)
            else:
                print("Registration was not completed successfully.")
                input("\nHit enter to return to the main menu.")

        elif register_or_login == "2":
            clear_screen()
            result = login()
            if result:
                user_id, user_role, user_full_name = result
                if user_role == "client":
                    log_audit(user_id, "Successful Login", f"The client '{user_full_name}' has successfully logged in.")
                    client_menu(user_id, user_full_name)
                elif user_role == "advisor":
                    log_audit(user_id, "Successful Login", f"The advisor '{user_full_name}' has successfully logged in.")
                    advisor_menu(user_id, user_full_name)
                elif user_role == "admin":
                    log_audit(user_id, "Successful Login", f"The administrator '{user_full_name}' has successfully logged in.")
                    admin_menu(user_id, user_full_name)
            else:
                print("Login failed. Please try again.")
                input("\nHit enter to return to the main menu.")

        elif register_or_login == "3":
            log_audit(None, "Program Exit", f"A user has exited the program.")
            print("Exiting program. Goodbye!")
            exit_program = True

def client_menu(user_id, user_full_name):
    logout = False
    while logout != True:
        clear_screen()
        print("-" * 200)
        print("My Finance Inc. Client Menu")
        print("-" * 200)
        print("Select what you want to do.")
        print("- Enter '1' to view your portfolios.")
        print("- Enter '2' to create a new portfolio.")
        print("- Enter '3' to transfer between portfolios.")
        print("- Enter '4' to view your transaction history.")
        print("- Enter '5' to view your profile.")
        print("- Enter '6' to access secure messaging.")
        print("- Enter '7' to logout.")
        option = input("\nSelect: ")

        if option == "1":
            clear_screen()
            log_audit(user_id, "View Portfolio", f"The client '{user_full_name}' viewed their portfolios.")
            view_portfolios(user_id)
            input("\nHit enter to continue.")
        elif option == "2":
            clear_screen()
            create_portfolio(user_id)
            log_audit(user_id, "Create Portfolio", f"The client '{user_full_name}' created a new portfolio.")
            input("\nHit enter to continue.")
        elif option == "3":
            clear_screen()
            transfer_between_portfolios(user_id, user_full_name, "client")
            input("\nHit enter to continue.")
        elif option == "4":
            clear_screen()
            view_transaction_history(user_id)
            log_audit(user_id, "View Transaction History", f"The client '{user_full_name}' viewed their transaction history.")
            input("\nHit enter to continue.")
        elif option == "5":
            clear_screen()
            edit_user_profile(user_id, user_full_name)
        elif option == "6":
            clear_screen()
            message_menu(user_id, user_full_name, "client", session)
        elif option == "7":
            clear_screen()
            log_audit(user_id, "Log Out", f"The client '{user_full_name}' has logged out.")
            logout = True

    print("You have successfully logged out")
    input("\nHit enter to continue.")
    main_menu()

def advisor_menu(user_id, user_full_name):
    clear_screen()
    logout = False
    while logout != True:
        print("-" * 200)
        print("My Finance Inc. Advisor Menu")
        print("-" * 200)
        print("Select what you want to do.")
        print("- Enter '1' to make a transaction for a client.")
        print("- Enter '2' to view a client's transaction history.")
        print("- Enter '3' to access secure messaging.")
        print("- Enter '4' to logout.")
        option = input("\nSelect: ")

        if option == "1":
            clear_screen()
            get_all_clients()
            client = input("\nPlease select the client (User ID): ")
            transfer_between_portfolios(client, user_full_name, "advisor")
            input("\nHit enter to continue.")
        elif option == "2":
            clear_screen()
            get_all_clients()
            client = input("\nPlease select the client (User ID): ")
            view_transaction_history(client)
            log_audit(user_id, "View Transaction History", f"The advisor '{user_full_name}' has viewed a client's transaction history.")
            input("\nHit enter to continue.")
        elif option == "3":
            clear_screen()
            message_menu(user_id, user_full_name, "advisor", session)
        elif option == "4":
            clear_screen()
            logout = True
            print("You have successfully logged out.")
            input("\nHit enter to continue.")
            log_audit(user_id, "Log Out", f"The advisor '{user_full_name}' has logged out.")
            main_menu()

def admin_menu(admin_id, admin_full_name):
    logout = False
    while logout != True:
        clear_screen()
        print("-" * 200)
        print("My Finance Inc. Admin Menu")
        print("-" * 200)
        print("Select what you want to do:")
        print("- Enter '1' to create a new user account.")
        print("- Enter '2' to lock/unlock a user account.")
        print("- Enter '3' to manage keys and certificates.")
        print("- Enter '4' to view audit logs.")
        print("- Enter '5' to check for security updates.")
        print("- Enter '6' to logout.")
        option = input("\nSelect: ")

        if option == "1":
            clear_screen()
            admin_create_user(admin_id, admin_full_name, session)
            input("\nHit enter to continue.")
        elif option == "2":
            clear_screen()
            manage_user_lock(admin_id, admin_full_name, session)
            input("\nHit enter to continue.")
        elif option == "3":
            clear_screen()
            key_management_menu(admin_id, admin_full_name)
        elif option == "4":
            clear_screen()
            view_audit_logs(session)
            log_audit(admin_id, "Viewing System Logs", f"The admin '{admin_full_name}' viewed the system attempts.")
        elif option == "5":
            clear_screen()
            try:
                spec = importlib.util.spec_from_file_location("security_updates", "security_updates.py")
                security_updates = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(security_updates)

                security_updates.apply_security_updates(admin_id, admin_full_name, session)
            except Exception as e:
                print(f"Error loading security updates module: {e}")
                input("\nHit enter to continue.")
        elif option == "6":
            clear_screen()
            logout = True
            print("You have successfully logged out.")
            input("\nHit enter to continue.")
            log_audit(admin_id, "Log Out", f"The admin '{admin_full_name}' has logged out.")
            main_menu()

if __name__ == "__main__":
    start_tls_server()

